@page "/"
@using StackExchange.Redis
@attribute [RenderModeServer]
@inject ISnackbar Snackbar
@inject ISubscriber Subscriber

<PageTitle>Subscriber</PageTitle>

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Subscriber</MudText>
        <MudSpacer/>
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.Brightness5 : Icons.Material.Filled.Brightness3)" Color="Color.Inherit" Edge="Edge.End" OnClick="ToggleDarkMode"/>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex justify-start flex-column align-center pa-6">
            @if (!_listening)
            {
                <MudStack Style="width: 300px;">
                    <MudPaper Class="pa-4">
                        <MudStack Spacing="4">
                            <MudInput @bind-Value="_channel" Placeholder="Channel" OnKeyUp="HandleKeyDown"></MudInput>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Subscribe">Subscribe</MudButton>
                        </MudStack>
                    </MudPaper>
                </MudStack>
            }
            else
            {
                <MudStack Style="width: 300px;">
                    <MudPaper Class="pa-4">
                        <MudText>Listening...</MudText>
                    </MudPaper>
                </MudStack>
            }
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private readonly MudTheme _theme = new();
    private bool _isDarkMode;
    private string _channel;
    private bool _listening;

    private void ToggleDarkMode() => _isDarkMode = !_isDarkMode;

    private void Subscribe()
    {
        if (_channel is null)
        {
            Snackbar.Add("Please enter a channel", Severity.Error);
            return;
        }

        SetListening(true);
        Subscriber.Subscribe(_channel,
            (_, message) =>
            {
                Snackbar.Add(message, Severity.Info);
                InvokeAsync(StateHasChanged);
            });
    }

    private void SetListening(bool listening)
    {
        _listening = listening;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            Subscribe();
        }
    }

}